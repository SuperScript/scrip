#!/bin/sh

home="$(pwd)"
_sort="env LC_ALL=POSIX sort"

PATH="${home}/bin:$PATH"
export PATH

scrip=scrip
basedir="${home}/tests/basedir"

####

# _silence prog
_silence() {
  "$@" >/dev/null 2>&1
}

# _sanitize < input > output
_sanitize() {
  sed \
    -e "s!${home}!...!"g
}

# _check prog
_check() {
  { "$@" 2>&1 ; echo $?; } | _sanitize
}

# _check_err prog
_check_err() {
  { "$@" 2>&1 >/dev/null ; echo $?; } | grep -E 'fatal:|(^[0-9]+)' | _sanitize
}

# _check_sort prog
_check_sort() {
  _check "$@" | ${_sort}
}

# _run headline
_run() {
  printf '\n\n#### %s\n\n' "$1"
}

####

cd tests
rm -rf "${basedir}"

_run 'scrip help offers help'
_check ${scrip} help

_run 'scrip deps lists dependencies'
mkdir -p "${basedir}"
cat - > "${basedir}/scriptest" <<'EOF'
#!/bin/sh
#include "safe.sh"
safe nosuchprogram
EOF

_check env SCRIP_PATH="${home}/lib" ${scrip} deps "${basedir}/scriptest"


_run 'shout prints message to stderr'
cat - > "${basedir}/shout_test.sh" <<'EOF'
#!/bin/sh
#include "shout.sh"
shout "test message"
EOF

env SCRIP_PATH="${home}/lib" ${scrip} code "${basedir}/shout_test.sh" > "${basedir}/shout_test"
_check sh "${basedir}/shout_test"


_run 'shout.awk prints message to stderr'
cat - > "${basedir}/shout_awk_test.awk" <<'EOF'
#include "shout.awk"
BEGIN { shout("test message"); }
EOF

env SCRIP_PATH="${home}/lib" ${scrip} code "${basedir}/shout_awk_test.awk" > "${basedir}/shout_awk_test"
_check awk -f "${basedir}/shout_awk_test"


_run 'barf prints fatal message and exits with 111'
cat - > "${basedir}/barf_test.sh" <<'EOF'
#!/bin/sh
#include "barf.sh"
barf "test error"
EOF

env SCRIP_PATH="${home}/lib" ${scrip} code "${basedir}/barf_test.sh" > "${basedir}/barf_test"
_check sh "${basedir}/barf_test"

_run 'barf.awk prints fatal message and exits with 111'
cat - > "${basedir}/barf_awk_test.awk" <<'EOF'
#include "barf.awk"
BEGIN { barf("test error"); }
EOF

env SCRIP_PATH="${home}/lib" ${scrip} code "${basedir}/barf_awk_test.awk" > "${basedir}/barf_awk_test"
_check awk -f "${basedir}/barf_awk_test"

_run 'scrip code resolves includes'
_check env SCRIP_PATH="${home}/lib" ${scrip} code "${basedir}/scriptest"


_run 'safe succeeds with valid command'
cat - > "${basedir}/safe_success.sh" <<'EOF'
#!/bin/sh
#include "safe.sh"
safe echo "hello world"
EOF

env SCRIP_PATH="${home}/lib" ${scrip} code "${basedir}/safe_success.sh" > "${basedir}/safe_success"
_check sh "${basedir}/safe_success"


_run 'safe fails and shows error'
cat - > "${basedir}/safe_fail.sh" <<'EOF'
#!/bin/sh
#include "safe.sh"
safe false
EOF

env SCRIP_PATH="${home}/lib" ${scrip} code "${basedir}/safe_fail.sh" > "${basedir}/safe_fail"
_check sh "${basedir}/safe_fail"


_run 'atomic_to writes output atomically on success'
cat - > "${basedir}/atomic_to_test.sh" <<'EOF'
#!/bin/sh
#include "atomic_to.sh"
atomic_to "basedir/output.txt" echo "test content"
cat "basedir/output.txt"
EOF

env SCRIP_PATH="${home}/lib" ${scrip} code "${basedir}/atomic_to_test.sh" > "${basedir}/atomic_to_test"
_check sh "${basedir}/atomic_to_test"


_run 'atomic_to cleans up on failure'
cat - > "${basedir}/atomic_to_fail.sh" <<'EOF'
#!/bin/sh
#include "atomic_to.sh"
(atomic_to "basedir/fail_output.txt" false)
if [ -f "basedir/fail_output.txt" ]; then
  echo "ERROR: basedir/fail_output.txt should not exist"
else
  echo "OK: basedir/fail_output.txt does not exist"
fi
EOF

env SCRIP_PATH="${home}/lib" ${scrip} code "${basedir}/atomic_to_fail.sh" > "${basedir}/atomic_to_fail"
_check sh "${basedir}/atomic_to_fail"


_run 'atomic_to_mode writes output with correct mode'
cat - > "${basedir}/atomic_to_mode_test.sh" <<'EOF'
#!/bin/sh
#include "atomic_to_mode.sh"
atomic_to_mode "basedir/script.sh" "755" echo "#!/bin/sh"
ls -l "basedir/script.sh" | cut -d' ' -f1
cat "basedir/script.sh"
EOF

env SCRIP_PATH="${home}/lib" ${scrip} code "${basedir}/atomic_to_mode_test.sh" > "${basedir}/atomic_to_mode_test"
_check sh "${basedir}/atomic_to_mode_test"


_run 'atomic_to_mode cleans up on failure'
cat - > "${basedir}/atomic_to_mode_fail.sh" <<'EOF'
#!/bin/sh
#include "atomic_to_mode.sh"
(atomic_to_mode "basedir/fail_script.sh" "755" false)
if [ -f "basedir/fail_script.sh" ]; then
  echo "ERROR: basedir/fail_script.sh should not exist"
else
  echo "OK: basedir/fail_script.sh does not exist"
fi
EOF

env SCRIP_PATH="${home}/lib" ${scrip} code "${basedir}/atomic_to_mode_fail.sh" > "${basedir}/atomic_to_mode_fail"
_check sh "${basedir}/atomic_to_mode_fail"


_run 'compose pipes two commands'
cat - > "${basedir}/compose_simple.sh" <<'EOF'
#!/bin/sh
#include "compose.sh"
compose echo "hello world" "|" cat
EOF

env SCRIP_PATH="${home}/lib" ${scrip} code "${basedir}/compose_simple.sh" > "${basedir}/compose_simple"
_check sh "${basedir}/compose_simple"

_run 'compose chains multiple commands'
cat - > "${basedir}/compose_multi.sh" <<'EOF'
#!/bin/sh
#include "compose.sh"
compose echo "line1\nline2\nline3" "|" sort "|" head -n 1
EOF

env SCRIP_PATH="${home}/lib" ${scrip} code "${basedir}/compose_multi.sh" > "${basedir}/compose_multi"
_check sh "${basedir}/compose_multi"

_run 'compose with single command (no separator)'
cat - > "${basedir}/compose_single.sh" <<'EOF'
#!/bin/sh
#include "compose.sh"
compose echo "no pipe here"
EOF

env SCRIP_PATH="${home}/lib" ${scrip} code "${basedir}/compose_single.sh" > "${basedir}/compose_single"
_check sh "${basedir}/compose_single"

_run 'compose with command arguments'
cat - > "${basedir}/compose_args.sh" <<'EOF'
#!/bin/sh
#include "compose.sh"
compose printf "apple\nbanana\ncherry\n" "|" grep "a"
EOF

env SCRIP_PATH="${home}/lib" ${scrip} code "${basedir}/compose_args.sh" > "${basedir}/compose_args"
_check sh "${basedir}/compose_args"


exit 0

