

#### bin/scrip prints usage

.../bin/scrip: usage: .../bin/scrip code|deps|help file...
100


#### bin/scrip help offers help

.../bin/scrip

  scrip code|deps|help file...
 
    help
      Print this helpful message
 
    deps file...
      Print the list of included file paths
      Path is printed only the first time encountered
      Paths are sorted by order of encounter
 
    code file...
      Print the code in files, resolving includes
      Includes are inserted only the first time encountered
 
0


#### bin/scrip deps lists dependencies

.../tests/basedir/scriptest
.../lib/safe.sh
.../lib/barf.sh
.../lib/shout.sh
0


#### bin/scrip code resolves includes

#!/bin/sh
shout() { echo "$0: $*" >&2; }
barf() { shout "fatal: $*"; exit 111; }
safe() { "$@" || barf "cannot $*"; }
safe nosuchprogram
0


#### shout prints message to stderr

.../tests/basedir/shout_test: test message
0


#### shout.awk prints message to stderr

awk: test message
0


#### barf prints fatal message and exits with 111

.../tests/basedir/barf_test: fatal: test error
111


#### barf.awk prints fatal message and exits with 111

awk: fatal: test error
111


#### safe succeeds with valid command

hello world
0


#### safe fails and shows error

.../tests/basedir/safe_fail: fatal: cannot false
111


#### atomic_to writes output atomically on success

test content
0


#### atomic_to cleans up on failure

OK: basedir/fail_output.txt does not exist
0


#### atomic_to_mode writes output with correct mode

-rwxr-xr-x
#!/bin/sh
0


#### atomic_to_mode cleans up on failure

OK: basedir/fail_script.sh does not exist
0


#### pipeline with single command (with separator)

no pipe here
0


#### pipeline with single command (without separator)

no pipe here
0


#### pipeline pipes two commands

Hello world
0


#### pipeline chains multiple commands

line1
0


#### pipeline with do_ works

thereugo
hereur
0


#### pipeline with do_run works

THEREUGO
HEREUR
0


#### pipeline with do_xrun works

X: HEREUR
X: THEREUGO
0


#### pipewith with single command (with separator)

pipewith: echo no pipe here
no pipe here
0


#### pipewith with single command (without separator)

pipewith: echo no pipe here
no pipe here
0


#### pipewith pipes two commands

pipewith: echo hello world
pipewith: sed s/^h/H/
Hello world
0


#### pipewith chains multiple commands

pipewith: printf %s\n line3 line2 line1
pipewith: sort
pipewith: head -n 1
line1
0


#### usage prints usage message and exits with 100

.../tests/basedir/usage_test: usage: this is output from usage to standard error
100


#### have_args returns 0 when enough arguments provided

SUCCESS: have_args returned 0
0


#### have_args returns 1 when not enough arguments provided

SUCCESS: have_args returned 1
0


#### have_args with no arguments shows usage and exits

.../tests/basedir/have_args_no_args: usage: have_args count [args...]
100


#### bin/pipeline prints usage and exits

.../bin/pipeline: usage: .../bin/pipeline sep prog [sep prog ...]
100


#### bin/pipeline requires a program

.../bin/pipeline: usage: .../bin/pipeline sep prog [sep prog ...]
100


#### bin/pipeline runs a program

hereur
0


#### bin/pipeline pipelines programs

thereugo
hereur
0


#### bin/scrip help takes file arguments

.../bin/pipeline

  pipeline sep prog [sep prog ...]
 
.../bin/scrip

  scrip code|deps|help file...
 
    help
      Print this helpful message
 
    deps file...
      Print the list of included file paths
      Path is printed only the first time encountered
      Paths are sorted by order of encounter
 
    code file...
      Print the code in files, resolving includes
      Includes are inserted only the first time encountered
 
0
